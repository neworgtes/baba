{"ast":null,"code":"import { Contract, utils, BigNumber } from \"ethers\";\nimport { _getProvider } from \"./ethereum\";\nimport BARN_ABI from \"./abi/barn.abi\";\nexport const stake = async (account, tokenIds) => {\n  const provider = _getProvider();\n  if (!provider) throw new Error(\"Unable to connect to wallet\");\n  const signer = provider.getSigner();\n  const contract = new Contract(process.env.REACT_APP_BARN, BARN_ABI, signer);\n  const gasEstimate = await contract.estimateGas.addManyToBarnAndPack(account, tokenIds);\n  return await contract.addManyToBarnAndPack(account, tokenIds, {\n    gasLimit: gasEstimate.mul(BigNumber.from(12)).div(BigNumber.from(10))\n  });\n};\nexport const claim = async (tokenIds, unstake) => {\n  const provider = _getProvider();\n  if (!provider) throw new Error(\"Unable to connect to wallet\");\n  const signer = provider.getSigner();\n  const contract = new Contract(process.env.REACT_APP_BARN, BARN_ABI, signer);\n  const gasEstimate = await contract.estimateGas.claimManyFromBarnAndPack(tokenIds, unstake);\n  return await contract.claimManyFromBarnAndPack(tokenIds, unstake, {\n    gasLimit: gasEstimate.mul(BigNumber.from(12)).div(BigNumber.from(10))\n  });\n};\nexport const parseClaims = receipt => {\n  const barn = new utils.Interface(BARN_ABI);\n  const claims = [];\n  receipt.logs.forEach(log => {\n    try {\n      const args = barn.parseLog(log).args;\n      if (args.tokenId) claims.push(args);\n    } catch (error) {}\n  });\n  return claims;\n};","map":{"version":3,"names":["Contract","utils","BigNumber","_getProvider","BARN_ABI","stake","account","tokenIds","provider","Error","signer","getSigner","contract","process","env","REACT_APP_BARN","gasEstimate","estimateGas","addManyToBarnAndPack","gasLimit","mul","from","div","claim","unstake","claimManyFromBarnAndPack","parseClaims","receipt","barn","Interface","claims","logs","forEach","log","args","parseLog","tokenId","push","error"],"sources":["/Users/krishna/Documents/Projects/sheep-game/src/utils/barn.js"],"sourcesContent":["import { Contract, utils, BigNumber } from \"ethers\";\nimport { _getProvider } from \"./ethereum\";\nimport BARN_ABI from \"./abi/barn.abi\";\n\nexport const stake = async (account, tokenIds) => {\n  const provider = _getProvider();\n  if (!provider) throw new Error(\"Unable to connect to wallet\");\n  const signer = provider.getSigner();\n  const contract = new Contract(process.env.REACT_APP_BARN, BARN_ABI, signer);\n  const gasEstimate = await contract.estimateGas.addManyToBarnAndPack(\n    account,\n    tokenIds\n  );\n  return await contract.addManyToBarnAndPack(account, tokenIds, {\n    gasLimit: gasEstimate.mul(BigNumber.from(12)).div(BigNumber.from(10)),\n  });\n};\n\nexport const claim = async (tokenIds, unstake) => {\n  const provider = _getProvider();\n  if (!provider) throw new Error(\"Unable to connect to wallet\");\n  const signer = provider.getSigner();\n  const contract = new Contract(process.env.REACT_APP_BARN, BARN_ABI, signer);\n  const gasEstimate = await contract.estimateGas.claimManyFromBarnAndPack(\n    tokenIds,\n    unstake\n  );\n  return await contract.claimManyFromBarnAndPack(tokenIds, unstake, {\n    gasLimit: gasEstimate.mul(BigNumber.from(12)).div(BigNumber.from(10)),\n  });\n};\n\nexport const parseClaims = (receipt) => {\n  const barn = new utils.Interface(BARN_ABI);\n  const claims = [];\n  receipt.logs.forEach((log) => {\n    try {\n      const args = barn.parseLog(log).args;\n      if (args.tokenId) claims.push(args);\n    } catch (error) {}\n  });\n  return claims;\n};\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,KAAK,EAAEC,SAAS,QAAQ,QAAQ;AACnD,SAASC,YAAY,QAAQ,YAAY;AACzC,OAAOC,QAAQ,MAAM,gBAAgB;AAErC,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,OAAO,EAAEC,QAAQ,KAAK;EAChD,MAAMC,QAAQ,GAAGL,YAAY,CAAC,CAAC;EAC/B,IAAI,CAACK,QAAQ,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAC7D,MAAMC,MAAM,GAAGF,QAAQ,CAACG,SAAS,CAAC,CAAC;EACnC,MAAMC,QAAQ,GAAG,IAAIZ,QAAQ,CAACa,OAAO,CAACC,GAAG,CAACC,cAAc,EAAEX,QAAQ,EAAEM,MAAM,CAAC;EAC3E,MAAMM,WAAW,GAAG,MAAMJ,QAAQ,CAACK,WAAW,CAACC,oBAAoB,CACjEZ,OAAO,EACPC,QACF,CAAC;EACD,OAAO,MAAMK,QAAQ,CAACM,oBAAoB,CAACZ,OAAO,EAAEC,QAAQ,EAAE;IAC5DY,QAAQ,EAAEH,WAAW,CAACI,GAAG,CAAClB,SAAS,CAACmB,IAAI,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAACpB,SAAS,CAACmB,IAAI,CAAC,EAAE,CAAC;EACtE,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAME,KAAK,GAAG,MAAAA,CAAOhB,QAAQ,EAAEiB,OAAO,KAAK;EAChD,MAAMhB,QAAQ,GAAGL,YAAY,CAAC,CAAC;EAC/B,IAAI,CAACK,QAAQ,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAC7D,MAAMC,MAAM,GAAGF,QAAQ,CAACG,SAAS,CAAC,CAAC;EACnC,MAAMC,QAAQ,GAAG,IAAIZ,QAAQ,CAACa,OAAO,CAACC,GAAG,CAACC,cAAc,EAAEX,QAAQ,EAAEM,MAAM,CAAC;EAC3E,MAAMM,WAAW,GAAG,MAAMJ,QAAQ,CAACK,WAAW,CAACQ,wBAAwB,CACrElB,QAAQ,EACRiB,OACF,CAAC;EACD,OAAO,MAAMZ,QAAQ,CAACa,wBAAwB,CAAClB,QAAQ,EAAEiB,OAAO,EAAE;IAChEL,QAAQ,EAAEH,WAAW,CAACI,GAAG,CAAClB,SAAS,CAACmB,IAAI,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAACpB,SAAS,CAACmB,IAAI,CAAC,EAAE,CAAC;EACtE,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMK,WAAW,GAAIC,OAAO,IAAK;EACtC,MAAMC,IAAI,GAAG,IAAI3B,KAAK,CAAC4B,SAAS,CAACzB,QAAQ,CAAC;EAC1C,MAAM0B,MAAM,GAAG,EAAE;EACjBH,OAAO,CAACI,IAAI,CAACC,OAAO,CAAEC,GAAG,IAAK;IAC5B,IAAI;MACF,MAAMC,IAAI,GAAGN,IAAI,CAACO,QAAQ,CAACF,GAAG,CAAC,CAACC,IAAI;MACpC,IAAIA,IAAI,CAACE,OAAO,EAAEN,MAAM,CAACO,IAAI,CAACH,IAAI,CAAC;IACrC,CAAC,CAAC,OAAOI,KAAK,EAAE,CAAC;EACnB,CAAC,CAAC;EACF,OAAOR,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"module"}