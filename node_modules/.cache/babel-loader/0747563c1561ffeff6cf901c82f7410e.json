{"ast":null,"code":"import { maybe } from \"./maybe.js\";\nexport default maybe(function () {\n  return globalThis;\n}) || maybe(function () {\n  return window;\n}) || maybe(function () {\n  return self;\n}) || maybe(function () {\n  return global;\n}) || maybe(function () {\n  return maybe.constructor(\"return this\")();\n});","map":{"version":3,"sources":["../../../src/utilities/globals/global.ts"],"names":[],"mappings":"AAAA,SAAS,KAAK,QAAQ,YAAY;AASlC,eACE,KAAK,CAAC,YAAA;EAAM,OAAA,UAAU;AAAV,CAAU,CAAC,IACvB,KAAK,CAAC,YAAA;EAAM,OAAA,MAAM;AAAN,CAAM,CAAC,IACnB,KAAK,CAAC,YAAA;EAAM,OAAA,IAAI;AAAJ,CAAI,CAAC,IACjB,KAAK,CAAC,YAAA;EAAM,OAAA,MAAM;AAAN,CAAM,CAAC,IAAA,KAAA,CAAA,YAAA;EAAA,OAAA,KAAA,CAAA,WAAA,CAAA,aAAA,CAAA,CAAA,CAAA;AAAA,CAAA,CAAA","sourcesContent":["import { maybe } from \"./maybe.js\";\n\ndeclare global {\n  const __DEV__: boolean; // will be removed in `dist` by the `postprocessDist` script\n\tinterface Window {\n\t\t__DEV__?: boolean;\n\t}\n}\n\nexport default (\n  maybe(() => globalThis) ||\n  maybe(() => window) ||\n  maybe(() => self) ||\n  maybe(() => global) ||\n  // We don't expect the Function constructor ever to be invoked at runtime, as\n  // long as at least one of globalThis, window, self, or global is defined, so\n  // we are under no obligation to make it easy for static analysis tools to\n  // detect syntactic usage of the Function constructor. If you think you can\n  // improve your static analysis to detect this obfuscation, think again. This\n  // is an arms race you cannot win, at least not in JavaScript.\n  maybe(function() { return maybe.constructor(\"return this\")() })\n) as typeof globalThis & Window;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}