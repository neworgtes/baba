{"ast":null,"code":"import gql from \"graphql-tag\";\nexport const QUERY = gql`\n  query fetch($wallet: String) {\n    tokens(\n      where: { owner: $wallet }\n      orderBy: number\n      orderDirection: asc\n      first: 1000\n    ) {\n      id\n      owner {\n        id\n      }\n      number\n      isSheep\n      fur\n      head\n      ears\n      eyes\n      nose\n      mouth\n      neck\n      feet\n      alpha\n      tokenURI\n    }\n    stakes(\n      where: { owner: $wallet }\n      first: 1000\n      orderBy: id\n      orderDirection: asc\n    ) {\n      id\n      owner {\n        id\n      }\n      token {\n        number\n        isSheep\n        fur\n        head\n        ears\n        eyes\n        nose\n        mouth\n        neck\n        feet\n        alpha\n        tokenURI\n      }\n      value\n    }\n    stat(id: \"global\") {\n      sheepMinted\n      sheepStaked\n      wolvesMinted\n      wolvesStaked\n      woolClaimed\n      woolPerAlpha\n      maxTokens\n      lastClaimTimestamp\n      woolStolen\n      woolEarned\n      totalSupply\n    }\n    users(orderBy: claimedWool, orderDirection: desc, first: 10) {\n      id\n      claimedWool\n      tokens {\n        id\n        isSheep\n      }\n    }\n    _meta {\n      block {\n        number\n      }\n    }\n  }\n`;\n\n// * OG\n// export const QUERY = gql`\n//   query fetch($wallet: String) {\n//     tokens(\n//       where: { owner: $wallet }\n//       orderBy: number\n//       orderDirection: asc\n//       first: 1000\n//     ) {\n//       id\n//       owner {\n//         id\n//       }\n//       number\n//       isSheep\n//       fur\n//       head\n//       ears\n//       eyes\n//       nose\n//       mouth\n//       neck\n//       feet\n//       alpha\n//       tokenURI\n//     }\n//     stakes(\n//       where: { owner: $wallet }\n//       first: 1000\n//       orderBy: id\n//       orderDirection: asc\n//     ) {\n//       id\n//       owner {\n//         id\n//       }\n//       token {\n//         number\n//         isSheep\n//         fur\n//         head\n//         ears\n//         eyes\n//         nose\n//         mouth\n//         neck\n//         feet\n//         alpha\n//         tokenURI\n//       }\n//       value\n//     }\n//     stat(id: \"global\") {\n//       sheepMinted\n//       sheepStaked\n//       wolvesMinted\n//       wolvesStaked\n//       woolClaimed\n//       woolPerAlpha\n//       maxTokens\n//       woolEarned\n//       lastClaimTimestamp\n//       woolStolen\n//       woolTaxed\n//       sheepStolen\n//       wolvesStolen\n//     }\n//     users(orderBy: claimedWool, orderDirection: desc, first: 10) {\n//       id\n//       claimedWool\n//       tokens {\n//         id\n//         isSheep\n//       }\n//     }\n//     _meta {\n//       block {\n//         number\n//       }\n//     }\n//   }\n// `;\n\nexport const parseGraphObject = woolfOrStake => {\n  if (woolfOrStake.value) {\n    return {\n      ...woolfOrStake,\n      ...woolfOrStake.token\n    };\n  }\n  return woolfOrStake;\n};","map":{"version":3,"names":["gql","QUERY","parseGraphObject","woolfOrStake","value","token"],"sources":["/Users/krishna/Documents/Projects/sheep-game/src/utils/query.js"],"sourcesContent":["import gql from \"graphql-tag\";\n\nexport const QUERY = gql`\n  query fetch($wallet: String) {\n    tokens(\n      where: { owner: $wallet }\n      orderBy: number\n      orderDirection: asc\n      first: 1000\n    ) {\n      id\n      owner {\n        id\n      }\n      number\n      isSheep\n      fur\n      head\n      ears\n      eyes\n      nose\n      mouth\n      neck\n      feet\n      alpha\n      tokenURI\n    }\n    stakes(\n      where: { owner: $wallet }\n      first: 1000\n      orderBy: id\n      orderDirection: asc\n    ) {\n      id\n      owner {\n        id\n      }\n      token {\n        number\n        isSheep\n        fur\n        head\n        ears\n        eyes\n        nose\n        mouth\n        neck\n        feet\n        alpha\n        tokenURI\n      }\n      value\n    }\n    stat(id: \"global\") {\n      sheepMinted\n      sheepStaked\n      wolvesMinted\n      wolvesStaked\n      woolClaimed\n      woolPerAlpha\n      maxTokens\n      lastClaimTimestamp\n      woolStolen\n      woolEarned\n      totalSupply\n    }\n    users(orderBy: claimedWool, orderDirection: desc, first: 10) {\n      id\n      claimedWool\n      tokens {\n        id\n        isSheep\n      }\n    }\n    _meta {\n      block {\n        number\n      }\n    }\n  }\n`;\n\n// * OG\n// export const QUERY = gql`\n//   query fetch($wallet: String) {\n//     tokens(\n//       where: { owner: $wallet }\n//       orderBy: number\n//       orderDirection: asc\n//       first: 1000\n//     ) {\n//       id\n//       owner {\n//         id\n//       }\n//       number\n//       isSheep\n//       fur\n//       head\n//       ears\n//       eyes\n//       nose\n//       mouth\n//       neck\n//       feet\n//       alpha\n//       tokenURI\n//     }\n//     stakes(\n//       where: { owner: $wallet }\n//       first: 1000\n//       orderBy: id\n//       orderDirection: asc\n//     ) {\n//       id\n//       owner {\n//         id\n//       }\n//       token {\n//         number\n//         isSheep\n//         fur\n//         head\n//         ears\n//         eyes\n//         nose\n//         mouth\n//         neck\n//         feet\n//         alpha\n//         tokenURI\n//       }\n//       value\n//     }\n//     stat(id: \"global\") {\n//       sheepMinted\n//       sheepStaked\n//       wolvesMinted\n//       wolvesStaked\n//       woolClaimed\n//       woolPerAlpha\n//       maxTokens\n//       woolEarned\n//       lastClaimTimestamp\n//       woolStolen\n//       woolTaxed\n//       sheepStolen\n//       wolvesStolen\n//     }\n//     users(orderBy: claimedWool, orderDirection: desc, first: 10) {\n//       id\n//       claimedWool\n//       tokens {\n//         id\n//         isSheep\n//       }\n//     }\n//     _meta {\n//       block {\n//         number\n//       }\n//     }\n//   }\n// `;\n\nexport const parseGraphObject = (woolfOrStake) => {\n  if (woolfOrStake.value) {\n    return { ...woolfOrStake, ...woolfOrStake.token };\n  }\n  return woolfOrStake;\n};\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,aAAa;AAE7B,OAAO,MAAMC,KAAK,GAAGD,GAAI;AACzgBAAgB,GAAIC,YAAY,IAAK;EAChD,IAAIA,YAAY,CAACC,KAAK,EAAE;IACtB,OAAO;MAAE,GAAGD,YAAY;MAAE,GAAGA,YAAY,CAACE;IAAM,CAAC;EACnD;EACA,OAAOF,YAAY;AACrB,CAAC"},"metadata":{},"sourceType":"module"}