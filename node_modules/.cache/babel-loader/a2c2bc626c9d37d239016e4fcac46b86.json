{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { invariant as originalInvariant, InvariantError } from \"ts-invariant\";\nimport { version } from \"../../version.js\";\nimport global from \"./global.js\";\nimport { stringifyForDisplay } from \"../common/stringifyForDisplay.js\";\nfunction wrap(fn) {\n  return function (message) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    fn.apply(void 0, __spreadArray([typeof message === \"number\" ? getErrorMsg(message) : message], args, false));\n  };\n}\nvar invariant = Object.assign(function invariant(condition, message) {\n  var args = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n  if (!condition) {\n    originalInvariant(condition, getErrorMsg(message, args));\n  }\n}, {\n  debug: wrap(originalInvariant.debug),\n  log: wrap(originalInvariant.log),\n  warn: wrap(originalInvariant.warn),\n  error: wrap(originalInvariant.error)\n});\nfunction newInvariantError(message) {\n  var optionalParams = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    optionalParams[_i - 1] = arguments[_i];\n  }\n  return new InvariantError(getErrorMsg(message, optionalParams));\n}\nvar ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + version);\nfunction getErrorMsg(message, messageArgs) {\n  if (messageArgs === void 0) {\n    messageArgs = [];\n  }\n  if (!message) return;\n  var args = messageArgs.map(function (arg) {\n    return typeof arg == \"string\" ? arg : stringifyForDisplay(arg, 2).slice(0, 1000);\n  });\n  return global[ApolloErrorMessageHandler] && global[ApolloErrorMessageHandler](message, args) || \"An error occured! For more details, see the full error text at https://go.apollo.dev/c/err#\".concat(encodeURIComponent(JSON.stringify({\n    version: version,\n    message: message,\n    args: args\n  })));\n}\nexport { invariant, InvariantError, newInvariantError, ApolloErrorMessageHandler };","map":{"version":3,"sources":["../../../src/utilities/globals/invariantWrappers.ts"],"names":[],"mappings":";AAAA,SAAS,SAAS,IAAI,iBAAiB,EAAE,cAAc,QAAQ,cAAc;AAC7E,SAAS,OAAO,QAAQ,kBAAkB;AAC1C,OAAO,MAAM,MAAM,aAAa;AAEhC,SAAS,mBAAmB,QAAQ,kCAAkC;AAEtE,SAAS,IAAI,CAAC,EAA0C,EAAA;EACtD,OAAO,UAAU,OAAwB,EAAA;IAAE,IAAA,IAAA,GAAA,EAAA;SAAA,IAAA,EAAA,GAAA,CAAc,EAAd,EAAA,GAAA,SAAA,CAAA,MAAc,EAAd,EAAA,EAAc,EAAA;MAAd,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;IACzC,EAAE,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,aAAA,CAAA,CAAC,OAAO,OAAO,KAAK,QAAQ,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,OAAO,CAAA,EAAK,IAAI,EAAA,KAAA,CAAA,CAAA;EAC1E,CAAC;AACH;AAgDA,IAAM,SAAS,GAAqB,MAAM,CAAC,MAAM,CAC/C,SAAS,SAAS,CAChB,SAAc,EACd,OAAyB,EAAA;EACzB,IAAA,IAAA,GAAA,EAAA;OAAA,IAAA,EAAA,GAAA,CAAkB,EAAlB,EAAA,GAAA,SAAA,CAAA,MAAkB,EAAlB,EAAA,EAAkB,EAAA;IAAlB,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;EAEA,IAAI,CAAC,SAAS,EAAE;IACd,iBAAiB,CAAC,SAAS,EAAE,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;EACzD;AACH,CAAC,EACD;EACE,KAAK,EAAE,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC;EACpC,GAAG,EAAE,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC;EAChC,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;EAClC,KAAK,EAAE,IAAI,CAAC,iBAAiB,CAAC,KAAK;CACpC,CACF;AAYD,SAAS,iBAAiB,CACxB,OAAyB,EAAA;EACzB,IAAA,cAAA,GAAA,EAAA;OAAA,IAAA,EAAA,GAAA,CAA4B,EAA5B,EAAA,GAAA,SAAA,CAAA,MAA4B,EAA5B,EAAA,EAA4B,EAAA;IAA5B,cAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;EAEA,OAAO,IAAI,cAAc,CAAC,WAAW,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;AACjE;AAEA,IAAM,yBAAyB,GAAG,MAAM,CAAC,GAAG,CAC1C,4BAA4B,GAAG,OAAO,CACvC;AASD,SAAS,WAAW,CAAC,OAAyB,EAAE,WAA2B,EAAA;EAA3B,IAAA,WAAA,KAAA,KAAA,CAAA,EAAA;IAAA,WAAA,GAAA,EAA2B;EAAA;EACzE,IAAI,CAAC,OAAO,EAAE;EACd,IAAM,IAAI,GAAG,WAAW,CAAC,GAAG,CAAC,UAAC,GAAG,EAAA;IAC/B,OAAA,OAAO,GAAG,IAAI,QAAQ,GAAG,GAAG,GAAG,mBAAmB,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC;EAAzE,CAAyE,CAC1E;EACD,OACG,MAAM,CAAC,yBAAyB,CAAC,IAChC,MAAM,CAAC,yBAAyB,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,IAClD,6FAAA,CAAA,MAAA,CAA8F,kBAAkB,CAC9G,IAAI,CAAC,SAAS,CAAC;IACb,OAAO,EAAA,OAAA;IACP,OAAO,EAAA,OAAA;IACP,IAAI,EAAA;GACL,CAAC,CACH,CAAE;AAEP;AAEA,SACE,SAAS,EACT,cAAc,EACd,iBAAiB,EACjB,yBAAyB","sourcesContent":["import { invariant as originalInvariant, InvariantError } from \"ts-invariant\";\nimport { version } from \"../../version.js\";\nimport global from \"./global.js\";\nimport type { ErrorCodes } from \"../../invariantErrorCodes.js\";\nimport { stringifyForDisplay } from \"../common/stringifyForDisplay.js\";\n\nfunction wrap(fn: (msg?: string, ...args: any[]) => void) {\n  return function (message: string | number, ...args: any[]) {\n    fn(typeof message === \"number\" ? getErrorMsg(message) : message, ...args);\n  };\n}\n\ntype LogFunction = {\n  /**\n   * Logs a `$level` message if the user used `ts-invariant`'s `setVerbosity` to set\n   * a verbosity level of `$level` or lower. (defaults to `\"log\"`).\n   *\n   * The user will either be presented with a link to the documentation for the message,\n   * or they can use the `loadDevMessages` to add the message strings to the bundle.\n   * The documentation will display the message without argument substitution.\n   * Instead, the arguments will be printed on the console after the link.\n   *\n   * `message` can only be a string, a concatenation of strings, or a ternary statement\n   * that results in a string. This will be enforced on build, where the message will\n   * be replaced with a message number.\n   *\n   * String substitutions like %s, %o, %d or %f are supported.\n   */\n  (message?: any, ...optionalParams: unknown[]): void;\n};\n\ntype WrappedInvariant = {\n  /**\n   * Throws and InvariantError with the given message if the condition is false.\n   *\n   * `message` can only be a string, a concatenation of strings, or a ternary statement\n   * that results in a string. This will be enforced on build, where the message will\n   * be replaced with a message number.\n   *\n   * The user will either be presented with a link to the documentation for the message,\n   * or they can use the `loadErrorMessages` to add the message strings to the bundle.\n   * The documentation will display the message with the arguments substituted.\n   *\n   * String substitutions with %s are supported and will also return\n   * pretty-stringified objects.\n   * Excess `optionalParams` will be swallowed.\n   */\n  (\n    condition: any,\n    message?: string | number,\n    ...optionalParams: unknown[]\n  ): asserts condition;\n\n  debug: LogFunction;\n  log: LogFunction;\n  warn: LogFunction;\n  error: LogFunction;\n};\nconst invariant: WrappedInvariant = Object.assign(\n  function invariant(\n    condition: any,\n    message?: string | number,\n    ...args: unknown[]\n  ): asserts condition {\n    if (!condition) {\n      originalInvariant(condition, getErrorMsg(message, args));\n    }\n  },\n  {\n    debug: wrap(originalInvariant.debug),\n    log: wrap(originalInvariant.log),\n    warn: wrap(originalInvariant.warn),\n    error: wrap(originalInvariant.error),\n  }\n);\n\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */\nfunction newInvariantError(\n  message?: string | number,\n  ...optionalParams: unknown[]\n) {\n  return new InvariantError(getErrorMsg(message, optionalParams));\n}\n\nconst ApolloErrorMessageHandler = Symbol.for(\n  \"ApolloErrorMessageHandler_\" + version\n);\ndeclare global {\n  interface Window {\n    [ApolloErrorMessageHandler]?: {\n      (message: string | number, args: unknown[]): string | undefined;\n    } & ErrorCodes;\n  }\n}\n\nfunction getErrorMsg(message?: string | number, messageArgs: unknown[] = []) {\n  if (!message) return;\n  const args = messageArgs.map((arg) =>\n    typeof arg == \"string\" ? arg : stringifyForDisplay(arg, 2).slice(0, 1000)\n  );\n  return (\n    (global[ApolloErrorMessageHandler] &&\n      global[ApolloErrorMessageHandler](message, args)) ||\n    `An error occured! For more details, see the full error text at https://go.apollo.dev/c/err#${encodeURIComponent(\n      JSON.stringify({\n        version,\n        message,\n        args,\n      })\n    )}`\n  );\n}\n\nexport {\n  invariant,\n  InvariantError,\n  newInvariantError,\n  ApolloErrorMessageHandler,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}