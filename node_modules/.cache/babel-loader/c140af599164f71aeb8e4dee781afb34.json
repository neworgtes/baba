{"ast":null,"code":"import { Contract } from \"ethers\";\nimport { _getProvider } from \"./ethereum\";\nimport ERC20_ABI from \"./abi/erc20.abi\";\nconst MAX_APPROVE = \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\nexport const approve = async (token, spender) => {\n  const provider = _getProvider();\n  if (!provider) throw new Error(\"Unable to connect to wallet\");\n  const signer = provider.getSigner();\n  const contract = new Contract(token, ERC20_ABI, signer);\n  return await contract.approve(spender, MAX_APPROVE);\n};","map":{"version":3,"names":["Contract","_getProvider","ERC20_ABI","MAX_APPROVE","approve","token","spender","provider","Error","signer","getSigner","contract"],"sources":["/Users/krishna/Documents/Projects/sheep-game/src/utils/erc20.js"],"sourcesContent":["import { Contract } from \"ethers\";\nimport { _getProvider } from \"./ethereum\";\nimport ERC20_ABI from \"./abi/erc20.abi\";\n\nconst MAX_APPROVE =\n  \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\nexport const approve = async (token, spender) => {\n  const provider = _getProvider();\n  if (!provider) throw new Error(\"Unable to connect to wallet\");\n  const signer = provider.getSigner();\n  const contract = new Contract(token, ERC20_ABI, signer);\n  return await contract.approve(spender, MAX_APPROVE);\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,QAAQ;AACjC,SAASC,YAAY,QAAQ,YAAY;AACzC,OAAOC,SAAS,MAAM,iBAAiB;AAEvC,MAAMC,WAAW,GACf,oEAAoE;AAEtE,OAAO,MAAMC,OAAO,GAAG,MAAAA,CAAOC,KAAK,EAAEC,OAAO,KAAK;EAC/C,MAAMC,QAAQ,GAAGN,YAAY,CAAC,CAAC;EAC/B,IAAI,CAACM,QAAQ,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAC7D,MAAMC,MAAM,GAAGF,QAAQ,CAACG,SAAS,CAAC,CAAC;EACnC,MAAMC,QAAQ,GAAG,IAAIX,QAAQ,CAACK,KAAK,EAAEH,SAAS,EAAEO,MAAM,CAAC;EACvD,OAAO,MAAME,QAAQ,CAACP,OAAO,CAACE,OAAO,EAAEH,WAAW,CAAC;AACrD,CAAC"},"metadata":{},"sourceType":"module"}